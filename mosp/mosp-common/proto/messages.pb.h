// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mosp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class BaseMessage;
class Vector2;
class Vector3;
class ConnectRequestMessage;
class ConnectResponseMessage;
class PlayerConnectMessage;
class PlayerDisconnectMessage;
class PlayerMovedMessage;

enum Type {
  ConnectRequest = 1,
  ConnectResponse = 2,
  PlayerConnect = 3,
  PlayerDisconnect = 4,
  PlayerMoved = 5
};
bool Type_IsValid(int value);
const Type Type_MIN = ConnectRequest;
const Type Type_MAX = PlayerMoved;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum CONNECT_REQUEST_ERROR {
  NAME_EXISTS = 1,
  SERVER_FULL = 2,
  INVALID_LOGIN = 3
};
bool CONNECT_REQUEST_ERROR_IsValid(int value);
const CONNECT_REQUEST_ERROR CONNECT_REQUEST_ERROR_MIN = NAME_EXISTS;
const CONNECT_REQUEST_ERROR CONNECT_REQUEST_ERROR_MAX = INVALID_LOGIN;
const int CONNECT_REQUEST_ERROR_ARRAYSIZE = CONNECT_REQUEST_ERROR_MAX + 1;

const ::google::protobuf::EnumDescriptor* CONNECT_REQUEST_ERROR_descriptor();
inline const ::std::string& CONNECT_REQUEST_ERROR_Name(CONNECT_REQUEST_ERROR value) {
  return ::google::protobuf::internal::NameOfEnum(
    CONNECT_REQUEST_ERROR_descriptor(), value);
}
inline bool CONNECT_REQUEST_ERROR_Parse(
    const ::std::string& name, CONNECT_REQUEST_ERROR* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CONNECT_REQUEST_ERROR>(
    CONNECT_REQUEST_ERROR_descriptor(), name, value);
}
// ===================================================================

class BaseMessage : public ::google::protobuf::Message {
 public:
  BaseMessage();
  virtual ~BaseMessage();

  BaseMessage(const BaseMessage& from);

  inline BaseMessage& operator=(const BaseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseMessage& default_instance();

  void Swap(BaseMessage* other);

  // implements Message ----------------------------------------------

  BaseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseMessage& from);
  void MergeFrom(const BaseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mosp.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // @@protoc_insertion_point(class_scope:mosp.BaseMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static BaseMessage* default_instance_;
};
// -------------------------------------------------------------------

class Vector2 : public ::google::protobuf::Message {
 public:
  Vector2();
  virtual ~Vector2();

  Vector2(const Vector2& from);

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector2& default_instance();

  void Swap(Vector2* other);

  // implements Message ----------------------------------------------

  Vector2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // @@protoc_insertion_point(class_scope:mosp.Vector2)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Vector2* default_instance_;
};
// -------------------------------------------------------------------

class Vector3 : public ::google::protobuf::Message {
 public:
  Vector3();
  virtual ~Vector3();

  Vector3(const Vector3& from);

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3& default_instance();

  void Swap(Vector3* other);

  // implements Message ----------------------------------------------

  Vector3* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // @@protoc_insertion_point(class_scope:mosp.Vector3)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static Vector3* default_instance_;
};
// -------------------------------------------------------------------

class ConnectRequestMessage : public ::google::protobuf::Message {
 public:
  ConnectRequestMessage();
  virtual ~ConnectRequestMessage();

  ConnectRequestMessage(const ConnectRequestMessage& from);

  inline ConnectRequestMessage& operator=(const ConnectRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectRequestMessage& default_instance();

  void Swap(ConnectRequestMessage* other);

  // implements Message ----------------------------------------------

  ConnectRequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectRequestMessage& from);
  void MergeFrom(const ConnectRequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mosp.Type type = 1 [default = ConnectRequest];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // required string username = 2;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 2;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:mosp.ConnectRequestMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  int type_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ConnectRequestMessage* default_instance_;
};
// -------------------------------------------------------------------

class ConnectResponseMessage : public ::google::protobuf::Message {
 public:
  ConnectResponseMessage();
  virtual ~ConnectResponseMessage();

  ConnectResponseMessage(const ConnectResponseMessage& from);

  inline ConnectResponseMessage& operator=(const ConnectResponseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectResponseMessage& default_instance();

  void Swap(ConnectResponseMessage* other);

  // implements Message ----------------------------------------------

  ConnectResponseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConnectResponseMessage& from);
  void MergeFrom(const ConnectResponseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mosp.Type type = 1 [default = ConnectResponse];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // required bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // optional .mosp.Vector2 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::mosp::Vector2& position() const;
  inline ::mosp::Vector2* mutable_position();
  inline ::mosp::Vector2* release_position();
  inline void set_allocated_position(::mosp::Vector2* position);

  // optional int32 client_id = 4;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 4;
  inline ::google::protobuf::int32 client_id() const;
  inline void set_client_id(::google::protobuf::int32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .mosp.CONNECT_REQUEST_ERROR error = 6;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 6;
  inline ::mosp::CONNECT_REQUEST_ERROR error() const;
  inline void set_error(::mosp::CONNECT_REQUEST_ERROR value);

  // @@protoc_insertion_point(class_scope:mosp.ConnectResponseMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  bool success_;
  ::mosp::Vector2* position_;
  ::std::string* name_;
  ::google::protobuf::int32 client_id_;
  int error_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ConnectResponseMessage* default_instance_;
};
// -------------------------------------------------------------------

class PlayerConnectMessage : public ::google::protobuf::Message {
 public:
  PlayerConnectMessage();
  virtual ~PlayerConnectMessage();

  PlayerConnectMessage(const PlayerConnectMessage& from);

  inline PlayerConnectMessage& operator=(const PlayerConnectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerConnectMessage& default_instance();

  void Swap(PlayerConnectMessage* other);

  // implements Message ----------------------------------------------

  PlayerConnectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerConnectMessage& from);
  void MergeFrom(const PlayerConnectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mosp.Type type = 1 [default = PlayerConnect];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 client_id = 3;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  inline ::google::protobuf::int32 client_id() const;
  inline void set_client_id(::google::protobuf::int32 value);

  // required .mosp.Vector2 position = 4;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 4;
  inline const ::mosp::Vector2& position() const;
  inline ::mosp::Vector2* mutable_position();
  inline ::mosp::Vector2* release_position();
  inline void set_allocated_position(::mosp::Vector2* position);

  // @@protoc_insertion_point(class_scope:mosp.PlayerConnectMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  ::google::protobuf::int32 client_id_;
  ::mosp::Vector2* position_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static PlayerConnectMessage* default_instance_;
};
// -------------------------------------------------------------------

class PlayerDisconnectMessage : public ::google::protobuf::Message {
 public:
  PlayerDisconnectMessage();
  virtual ~PlayerDisconnectMessage();

  PlayerDisconnectMessage(const PlayerDisconnectMessage& from);

  inline PlayerDisconnectMessage& operator=(const PlayerDisconnectMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerDisconnectMessage& default_instance();

  void Swap(PlayerDisconnectMessage* other);

  // implements Message ----------------------------------------------

  PlayerDisconnectMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerDisconnectMessage& from);
  void MergeFrom(const PlayerDisconnectMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mosp.Type type = 1 [default = PlayerDisconnect];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // required int32 client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::int32 client_id() const;
  inline void set_client_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:mosp.PlayerDisconnectMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_client_id();
  inline void clear_has_client_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 client_id_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static PlayerDisconnectMessage* default_instance_;
};
// -------------------------------------------------------------------

class PlayerMovedMessage : public ::google::protobuf::Message {
 public:
  PlayerMovedMessage();
  virtual ~PlayerMovedMessage();

  PlayerMovedMessage(const PlayerMovedMessage& from);

  inline PlayerMovedMessage& operator=(const PlayerMovedMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerMovedMessage& default_instance();

  void Swap(PlayerMovedMessage* other);

  // implements Message ----------------------------------------------

  PlayerMovedMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerMovedMessage& from);
  void MergeFrom(const PlayerMovedMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .mosp.Type type = 1 [default = PlayerMoved];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // required int32 client_id = 2;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 2;
  inline ::google::protobuf::int32 client_id() const;
  inline void set_client_id(::google::protobuf::int32 value);

  // required .mosp.Vector2 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline const ::mosp::Vector2& position() const;
  inline ::mosp::Vector2* mutable_position();
  inline ::mosp::Vector2* release_position();
  inline void set_allocated_position(::mosp::Vector2* position);

  // @@protoc_insertion_point(class_scope:mosp.PlayerMovedMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_position();
  inline void clear_has_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 client_id_;
  ::mosp::Vector2* position_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static PlayerMovedMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseMessage

// optional .mosp.Type type = 1;
inline bool BaseMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mosp::Type BaseMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.BaseMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void BaseMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.BaseMessage.type)
}

// -------------------------------------------------------------------

// Vector2

// required float x = 1;
inline bool Vector2::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector2::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector2::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector2::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:mosp.Vector2.x)
  return x_;
}
inline void Vector2::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mosp.Vector2.x)
}

// required float y = 2;
inline bool Vector2::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector2::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector2::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector2::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:mosp.Vector2.y)
  return y_;
}
inline void Vector2::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mosp.Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// required float x = 1;
inline bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:mosp.Vector3.x)
  return x_;
}
inline void Vector3::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mosp.Vector3.x)
}

// required float y = 2;
inline bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:mosp.Vector3.y)
  return y_;
}
inline void Vector3::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mosp.Vector3.y)
}

// required float z = 3;
inline bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:mosp.Vector3.z)
  return z_;
}
inline void Vector3::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mosp.Vector3.z)
}

// -------------------------------------------------------------------

// ConnectRequestMessage

// optional .mosp.Type type = 1 [default = ConnectRequest];
inline bool ConnectRequestMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectRequestMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectRequestMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectRequestMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mosp::Type ConnectRequestMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectRequestMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void ConnectRequestMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.ConnectRequestMessage.type)
}

// required string username = 2;
inline bool ConnectRequestMessage::has_username() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectRequestMessage::set_has_username() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectRequestMessage::clear_has_username() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectRequestMessage::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& ConnectRequestMessage::username() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectRequestMessage.username)
  return *username_;
}
inline void ConnectRequestMessage::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:mosp.ConnectRequestMessage.username)
}
inline void ConnectRequestMessage::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:mosp.ConnectRequestMessage.username)
}
inline void ConnectRequestMessage::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mosp.ConnectRequestMessage.username)
}
inline ::std::string* ConnectRequestMessage::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mosp.ConnectRequestMessage.username)
  return username_;
}
inline ::std::string* ConnectRequestMessage::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectRequestMessage::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.ConnectRequestMessage.username)
}

// required string password = 3;
inline bool ConnectRequestMessage::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectRequestMessage::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectRequestMessage::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectRequestMessage::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ConnectRequestMessage::password() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectRequestMessage.password)
  return *password_;
}
inline void ConnectRequestMessage::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:mosp.ConnectRequestMessage.password)
}
inline void ConnectRequestMessage::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:mosp.ConnectRequestMessage.password)
}
inline void ConnectRequestMessage::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mosp.ConnectRequestMessage.password)
}
inline ::std::string* ConnectRequestMessage::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mosp.ConnectRequestMessage.password)
  return password_;
}
inline ::std::string* ConnectRequestMessage::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectRequestMessage::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.ConnectRequestMessage.password)
}

// -------------------------------------------------------------------

// ConnectResponseMessage

// optional .mosp.Type type = 1 [default = ConnectResponse];
inline bool ConnectResponseMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConnectResponseMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConnectResponseMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConnectResponseMessage::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::mosp::Type ConnectResponseMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectResponseMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void ConnectResponseMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.ConnectResponseMessage.type)
}

// required bool success = 2;
inline bool ConnectResponseMessage::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConnectResponseMessage::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConnectResponseMessage::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConnectResponseMessage::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool ConnectResponseMessage::success() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectResponseMessage.success)
  return success_;
}
inline void ConnectResponseMessage::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:mosp.ConnectResponseMessage.success)
}

// optional .mosp.Vector2 position = 3;
inline bool ConnectResponseMessage::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConnectResponseMessage::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConnectResponseMessage::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConnectResponseMessage::clear_position() {
  if (position_ != NULL) position_->::mosp::Vector2::Clear();
  clear_has_position();
}
inline const ::mosp::Vector2& ConnectResponseMessage::position() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectResponseMessage.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::mosp::Vector2* ConnectResponseMessage::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::mosp::Vector2;
  // @@protoc_insertion_point(field_mutable:mosp.ConnectResponseMessage.position)
  return position_;
}
inline ::mosp::Vector2* ConnectResponseMessage::release_position() {
  clear_has_position();
  ::mosp::Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline void ConnectResponseMessage::set_allocated_position(::mosp::Vector2* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.ConnectResponseMessage.position)
}

// optional int32 client_id = 4;
inline bool ConnectResponseMessage::has_client_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConnectResponseMessage::set_has_client_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConnectResponseMessage::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConnectResponseMessage::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 ConnectResponseMessage::client_id() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectResponseMessage.client_id)
  return client_id_;
}
inline void ConnectResponseMessage::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:mosp.ConnectResponseMessage.client_id)
}

// optional string name = 5;
inline bool ConnectResponseMessage::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConnectResponseMessage::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConnectResponseMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConnectResponseMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ConnectResponseMessage::name() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectResponseMessage.name)
  return *name_;
}
inline void ConnectResponseMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mosp.ConnectResponseMessage.name)
}
inline void ConnectResponseMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mosp.ConnectResponseMessage.name)
}
inline void ConnectResponseMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mosp.ConnectResponseMessage.name)
}
inline ::std::string* ConnectResponseMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mosp.ConnectResponseMessage.name)
  return name_;
}
inline ::std::string* ConnectResponseMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConnectResponseMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.ConnectResponseMessage.name)
}

// optional .mosp.CONNECT_REQUEST_ERROR error = 6;
inline bool ConnectResponseMessage::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConnectResponseMessage::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConnectResponseMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConnectResponseMessage::clear_error() {
  error_ = 1;
  clear_has_error();
}
inline ::mosp::CONNECT_REQUEST_ERROR ConnectResponseMessage::error() const {
  // @@protoc_insertion_point(field_get:mosp.ConnectResponseMessage.error)
  return static_cast< ::mosp::CONNECT_REQUEST_ERROR >(error_);
}
inline void ConnectResponseMessage::set_error(::mosp::CONNECT_REQUEST_ERROR value) {
  assert(::mosp::CONNECT_REQUEST_ERROR_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:mosp.ConnectResponseMessage.error)
}

// -------------------------------------------------------------------

// PlayerConnectMessage

// optional .mosp.Type type = 1 [default = PlayerConnect];
inline bool PlayerConnectMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerConnectMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerConnectMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerConnectMessage::clear_type() {
  type_ = 3;
  clear_has_type();
}
inline ::mosp::Type PlayerConnectMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerConnectMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void PlayerConnectMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.PlayerConnectMessage.type)
}

// required string name = 2;
inline bool PlayerConnectMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerConnectMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerConnectMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerConnectMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerConnectMessage::name() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerConnectMessage.name)
  return *name_;
}
inline void PlayerConnectMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mosp.PlayerConnectMessage.name)
}
inline void PlayerConnectMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mosp.PlayerConnectMessage.name)
}
inline void PlayerConnectMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mosp.PlayerConnectMessage.name)
}
inline ::std::string* PlayerConnectMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mosp.PlayerConnectMessage.name)
  return name_;
}
inline ::std::string* PlayerConnectMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PlayerConnectMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.PlayerConnectMessage.name)
}

// required int32 client_id = 3;
inline bool PlayerConnectMessage::has_client_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerConnectMessage::set_has_client_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerConnectMessage::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerConnectMessage::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 PlayerConnectMessage::client_id() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerConnectMessage.client_id)
  return client_id_;
}
inline void PlayerConnectMessage::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:mosp.PlayerConnectMessage.client_id)
}

// required .mosp.Vector2 position = 4;
inline bool PlayerConnectMessage::has_position() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerConnectMessage::set_has_position() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerConnectMessage::clear_has_position() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerConnectMessage::clear_position() {
  if (position_ != NULL) position_->::mosp::Vector2::Clear();
  clear_has_position();
}
inline const ::mosp::Vector2& PlayerConnectMessage::position() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerConnectMessage.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::mosp::Vector2* PlayerConnectMessage::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::mosp::Vector2;
  // @@protoc_insertion_point(field_mutable:mosp.PlayerConnectMessage.position)
  return position_;
}
inline ::mosp::Vector2* PlayerConnectMessage::release_position() {
  clear_has_position();
  ::mosp::Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PlayerConnectMessage::set_allocated_position(::mosp::Vector2* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.PlayerConnectMessage.position)
}

// -------------------------------------------------------------------

// PlayerDisconnectMessage

// optional .mosp.Type type = 1 [default = PlayerDisconnect];
inline bool PlayerDisconnectMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerDisconnectMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerDisconnectMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerDisconnectMessage::clear_type() {
  type_ = 4;
  clear_has_type();
}
inline ::mosp::Type PlayerDisconnectMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerDisconnectMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void PlayerDisconnectMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.PlayerDisconnectMessage.type)
}

// required int32 client_id = 2;
inline bool PlayerDisconnectMessage::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerDisconnectMessage::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerDisconnectMessage::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerDisconnectMessage::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 PlayerDisconnectMessage::client_id() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerDisconnectMessage.client_id)
  return client_id_;
}
inline void PlayerDisconnectMessage::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:mosp.PlayerDisconnectMessage.client_id)
}

// -------------------------------------------------------------------

// PlayerMovedMessage

// optional .mosp.Type type = 1 [default = PlayerMoved];
inline bool PlayerMovedMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerMovedMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerMovedMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerMovedMessage::clear_type() {
  type_ = 5;
  clear_has_type();
}
inline ::mosp::Type PlayerMovedMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerMovedMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void PlayerMovedMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.PlayerMovedMessage.type)
}

// required int32 client_id = 2;
inline bool PlayerMovedMessage::has_client_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerMovedMessage::set_has_client_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerMovedMessage::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerMovedMessage::clear_client_id() {
  client_id_ = 0;
  clear_has_client_id();
}
inline ::google::protobuf::int32 PlayerMovedMessage::client_id() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerMovedMessage.client_id)
  return client_id_;
}
inline void PlayerMovedMessage::set_client_id(::google::protobuf::int32 value) {
  set_has_client_id();
  client_id_ = value;
  // @@protoc_insertion_point(field_set:mosp.PlayerMovedMessage.client_id)
}

// required .mosp.Vector2 position = 3;
inline bool PlayerMovedMessage::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerMovedMessage::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerMovedMessage::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerMovedMessage::clear_position() {
  if (position_ != NULL) position_->::mosp::Vector2::Clear();
  clear_has_position();
}
inline const ::mosp::Vector2& PlayerMovedMessage::position() const {
  // @@protoc_insertion_point(field_get:mosp.PlayerMovedMessage.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::mosp::Vector2* PlayerMovedMessage::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::mosp::Vector2;
  // @@protoc_insertion_point(field_mutable:mosp.PlayerMovedMessage.position)
  return position_;
}
inline ::mosp::Vector2* PlayerMovedMessage::release_position() {
  clear_has_position();
  ::mosp::Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline void PlayerMovedMessage::set_allocated_position(::mosp::Vector2* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.PlayerMovedMessage.position)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mosp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mosp::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mosp::Type>() {
  return ::mosp::Type_descriptor();
}
template <> struct is_proto_enum< ::mosp::CONNECT_REQUEST_ERROR> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mosp::CONNECT_REQUEST_ERROR>() {
  return ::mosp::CONNECT_REQUEST_ERROR_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
