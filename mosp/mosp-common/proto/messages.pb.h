// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mosp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class BaseMessage;
class JoinRequestMessage;

enum Type {
  JoinRequest = 1
};
bool Type_IsValid(int value);
const Type Type_MIN = JoinRequest;
const Type Type_MAX = JoinRequest;
const int Type_ARRAYSIZE = Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_descriptor();
inline const ::std::string& Type_Name(Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_descriptor(), value);
}
inline bool Type_Parse(
    const ::std::string& name, Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
// ===================================================================

class BaseMessage : public ::google::protobuf::Message {
 public:
  BaseMessage();
  virtual ~BaseMessage();

  BaseMessage(const BaseMessage& from);

  inline BaseMessage& operator=(const BaseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseMessage& default_instance();

  void Swap(BaseMessage* other);

  // implements Message ----------------------------------------------

  BaseMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseMessage& from);
  void MergeFrom(const BaseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mosp.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // @@protoc_insertion_point(class_scope:mosp.BaseMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static BaseMessage* default_instance_;
};
// -------------------------------------------------------------------

class JoinRequestMessage : public ::google::protobuf::Message {
 public:
  JoinRequestMessage();
  virtual ~JoinRequestMessage();

  JoinRequestMessage(const JoinRequestMessage& from);

  inline JoinRequestMessage& operator=(const JoinRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRequestMessage& default_instance();

  void Swap(JoinRequestMessage* other);

  // implements Message ----------------------------------------------

  JoinRequestMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinRequestMessage& from);
  void MergeFrom(const JoinRequestMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mosp.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mosp::Type type() const;
  inline void set_type(::mosp::Type value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:mosp.JoinRequestMessage)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  int type_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static JoinRequestMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// BaseMessage

// required .mosp.Type type = 1;
inline bool BaseMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mosp::Type BaseMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.BaseMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void BaseMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.BaseMessage.type)
}

// -------------------------------------------------------------------

// JoinRequestMessage

// required .mosp.Type type = 1;
inline bool JoinRequestMessage::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinRequestMessage::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinRequestMessage::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinRequestMessage::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mosp::Type JoinRequestMessage::type() const {
  // @@protoc_insertion_point(field_get:mosp.JoinRequestMessage.type)
  return static_cast< ::mosp::Type >(type_);
}
inline void JoinRequestMessage::set_type(::mosp::Type value) {
  assert(::mosp::Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:mosp.JoinRequestMessage.type)
}

// required string name = 2;
inline bool JoinRequestMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinRequestMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinRequestMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinRequestMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& JoinRequestMessage::name() const {
  // @@protoc_insertion_point(field_get:mosp.JoinRequestMessage.name)
  return *name_;
}
inline void JoinRequestMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:mosp.JoinRequestMessage.name)
}
inline void JoinRequestMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:mosp.JoinRequestMessage.name)
}
inline void JoinRequestMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mosp.JoinRequestMessage.name)
}
inline ::std::string* JoinRequestMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mosp.JoinRequestMessage.name)
  return name_;
}
inline ::std::string* JoinRequestMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinRequestMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mosp.JoinRequestMessage.name)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mosp

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::mosp::Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mosp::Type>() {
  return ::mosp::Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
